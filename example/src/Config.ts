//
// Copyright 2023 Wultra s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.
//

import { MalwarelyticsConfig, MalwarelyticsServiceConfig, MalwarelyticsServiceEnvironment } from "react-native-malwarelytics"
import { Config } from "react-native-config"

const defaultConfig: MalwarelyticsConfig = {

    // ▛▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▜
    // ▌                                                              ▐
    // ▌                       W A R N I N G                          ▐
    // ▌                                                              ▐
    // ▌                  Do not edit this file.                      ▐
    // ▌         You may leak your cretentials by accident.           ▐
    // ▌                                                              ▐
    // ▌   If you need to provide Malwarelytics Service credentials   ▐
    // ▌    then open `.env-example` file and follow instructions     ▐
    // ▌                    from that file.                           ▐
    // ▌                                                              ▐
    // ▙▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▟

    //environment: "TEST",
    apple: {
        // service: {
        //     username: "your-username-for-ios app",
        //     password: "your-password-for-ios app",
        //     signaturePublicKey: "your-sign-pk-for-ios-app"
        // },
        rasp: {
            repackage: { action: "NOTIFY" }
        }
    },
    android: {
        // service: {
        //     username: "your-username-for-android app",
        //     password: "your-password-for-android app",
        //     signaturePublicKey: "your-sign-pk-for-android-app"
        // },
        rasp: {
            root: { action: 'NOTIFY' },
            tapjacking: {
                blockSensitivity: 'SAFE'
            }
        },
        antivirus: {
            enableSilentMode: false
        }
    }    
}

/**
 * Load default Malwarelytics config. If `.env` file contains service credentials, then mix
 * the credentials with the default config.
 */
export function loadMalwarelyticsConfig(): MalwarelyticsConfig {
    var config = {...defaultConfig}
    const envConfig = loadEnvConfig()
    if (envConfig?.environment != undefined) {
        config.environment = envConfig.environment
    }
    if (envConfig?.appleService != undefined) {
        config.apple = { service: envConfig.appleService, ...defaultConfig.apple}
    }
    if (envConfig?.androidService != undefined) {
        config.android = { service: envConfig.androidService, ...defaultConfig.android}
    }
    //console.log(`${Platform.OS}: Loaded config: ${JSON.stringify(config)}`)
    return config
}

interface EnvConfig {
    environment?: MalwarelyticsServiceEnvironment
    appleService?: MalwarelyticsServiceConfig
    androidService?: MalwarelyticsServiceConfig
}
var isEnvConfigLoaded = false
var loadedEnvConfig: EnvConfig | undefined

function loadEnvConfig(): EnvConfig | undefined {
    if (isEnvConfigLoaded) {
        return loadedEnvConfig
    }
    //console.log(`${Platform.OS}: Loading from .env`)
    if (Config.SERVICE_OFFLINE !== 'true') {        
        // Common
        const conf: EnvConfig = {}
        conf.environment = Config.SERVICE_ENV as MalwarelyticsServiceEnvironment
        // Apple
        const appleUsername = Config.SERVICE_APPLE_USERNAME
        const applePassword = Config.SERVICE_APPLE_PASSWORD
        const applePublicKey = Config.SERVICE_APPLE_PUBLIC_KEY
        if (appleUsername != undefined && applePassword != undefined && applePublicKey != undefined) {
            conf.appleService = {
                username: appleUsername,
                password: applePassword,
                signaturePublicKey: applePublicKey,
                environment: Config.SERVICE_APPLE_ENV as MalwarelyticsServiceEnvironment
            }
        }
        // Android
        const androidUsername = Config.SERVICE_ANDROID_USERNAME
        const androidPassword = Config.SERVICE_ANDROID_PASSWORD
        const androidPublicKey = Config.SERVICE_ANDROID_PUBLIC_KEY
        if (androidUsername != undefined && androidPassword != undefined && androidPublicKey != undefined) {
            conf.androidService = {
                username: androidUsername,
                password: androidPassword,
                signaturePublicKey: androidPublicKey,
                environment: Config.SERVICE_ANDROID_ENV as MalwarelyticsServiceEnvironment
            }
        }
        loadedEnvConfig = conf
    }
    isEnvConfigLoaded = true
    return loadedEnvConfig
}
