//
// Copyright 2023 Wultra s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.
//

import AppProtection
import React

extension AppProtectionConfig {
    
    /// Create AppProtectionConfig from JSON dictionary.
    /// - Parameter dict: Dictionary with configuration.
    /// - Returns: Configuration created from JSON dictionary.
    static func fromDictionary(_ dict: ConfigDictionary) throws -> AppProtectionConfig {
        // Prepare online configuration depending on presence of "apple.service"
        let serviceDict = try dict.dictOptAt("apple.service")
        let onlineConfig: AppProtectionOnlineConfig?
        if let serviceDict = serviceDict {
            onlineConfig = .init(
                username: try dict.stringAt("apple.service.username"),
                password: try dict.stringAt("apple.service.password"),
                signaturePublicKey: try dict.stringOptAt("apple.service.signaturePublicKey"),
                clientIdentification: try .fromDictionary(dict.dictOptAt("clientIdentification")),
                eventsConfig: try .fromDictionary(dict.dictOptAt("apple.events")),
                customerGroupingConfig: try .fromDictionary(dict.dictOptAt("apple.customerGrouping")),
                environment: try .fromValue(dict.stringOptAt("apple.service.environment", in: "MalwarelyticsServiceEnvironment") ?? dict.stringOptAt("environment"))
            )
        } else {
            onlineConfig = nil
        }
        return AppProtectionConfig(
            raspConfig: try .fromDictionary(dict.dictOptAt("apple.rasp")),
            onlineConfig: onlineConfig
        )
    }
    
    /// Name of configuration object repodted in the exception.
    static let jsObj = "MalwarelyticsConfig"
}

extension AppProtectionIdentificationConfig {
    
    /// Create AppProtectionIdentificationConfig from JSON dictionary.
    /// - Parameter dict: Dictionary with configuration.
    /// - Returns: Configuration created from JSON dictionary.
    static func fromDictionary(_ dict: ConfigDictionary?) throws -> AppProtectionIdentificationConfig? {
        guard let dict = dict else { return nil }
        return .init(
            userId: try dict.stringOptAt("clientId", in: jsObj),
            deviceId: try dict.stringOptAt("deviceId", in: jsObj)
        )
    }
    
    /// Name of configuration object repodted in the exception.
    static let jsObj = "MalwarelyticsClientIdentification"
}

extension AppProtectionCustomerGroupingConfig {
    /// Create AppProtectionCustomerGroupingConfig from JSON dictionary.
    /// - Parameter dict: Dictionary with configuration.
    /// - Returns: Configuration created from JSON dictionary.
    static func fromDictionary(_ dict: ConfigDictionary?) throws -> AppProtectionCustomerGroupingConfig? {
        guard let dict = dict else { return nil }
        return .init(
            sourceBundleId: try dict.stringOptAt("sourceBundleId", in: jsObj),
            appBundleId: try dict.stringOptAt("appBundleId", in: jsObj),
            audienceGroupId: try dict.stringOptAt("audienceGroupId", in: jsObj)
        )
    }
    
    /// Name of configuration object repodted in the exception.
    static let jsObj = "MalwarelyticsAppleCustomerGroupingConfig"
}

extension AppProtectionRaspConfig {
    /// Create AppProtectionRaspConfig from JSON dictionary.
    /// - Parameter dict: Dictionary with configuration.
    /// - Returns: Configuration created from JSON dictionary.
    static func fromDictionary(_ dict: ConfigDictionary?) throws -> AppProtectionRaspConfig {
        let fallback = AppProtectionRaspConfig()
        guard let dict = dict else { return fallback }
        return .init(
            jailbreak: try .fromDictionary(dict.dictOptAt("jailbreak")) ?? fallback.jailbreak,
            debugger: try .fromDictionary(dict.dictOptAt("debugger")) ?? fallback.debugger,
            reverseEngineeringTools: try .fromDictionary(dict.dictOptAt("reverseEngineeringTools")) ?? fallback.reverseEngineeringTools,
            httpProxy: try .fromDictionary(dict.dictOptAt("httpProxy")) ?? fallback.httpProxy,
            repackage: try .fromDictionary(dict.dictOptAt("repackage")) ?? fallback.repackage,
            screenCapture: try .fromDictionary(dict.dictOptAt("screenCapture")) ?? fallback.screenCapture,
            vpnDetection: try .fromDictionary(dict.dictOptAt("vpn")) ?? fallback.vpnDetection
        )
    }
    
    /// Name of configuration object repodted in the exception.
    static let jsObj = "MalwarelyticsAppleRaspConfig"
}

extension AppProtectionRaspConfig.DetectionConfig {
    /// Create AppProtectionRaspConfig.DetectionConfig from JSON dictionary.
    /// - Parameter dict: Dictionary with configuration.
    /// - Returns: Configuration created from JSON dictionary.
    static func fromDictionary(_ dict: ConfigDictionary?) throws -> AppProtectionRaspConfig.DetectionConfig? {
        guard let dict = dict else {
            return nil
        }
        let action = try dict.stringAt("action", in: jsObj)
        let exitUrl = try dict.stringOptAt("exitUrl", in: jsObj)
        switch action {
        case "NO_ACTION":
            return .noAction
        case "NOTIFY":
            return .notify
        case "EXIT":
            return .exit(exitUrl)
        default:
            throw ModuleError.invalidConfig(configPath: "action", object: jsObj)
        }
    }
    
    /// Name of configuration object repodted in the exception.
    static let jsObj = "MalwarelyticsAppleBasicDetectionConfig"
}

extension AppProtectionRaspConfig.DebuggerDetectionConfig {
    /// Create AppProtectionRaspConfig.DebuggerDetectionConfig from JSON dictionary.
    /// - Parameter dict: Dictionary with configuration.
    /// - Returns: Configuration created from JSON dictionary.
    static func fromDictionary(_ dict: ConfigDictionary?) throws -> AppProtectionRaspConfig.DebuggerDetectionConfig? {
        guard let dict = dict else {
            return nil
        }
        let action = try dict.stringAt("action", in: jsObj)
        let exitUrl = try dict.stringOptAt("exitUrl", in: jsObj)
        switch action {
        case "NO_ACTION":
            return .noAction
        case "NOTIFY":
            return .notify
        case "BLOCK":
            return .block
        case "EXIT":
            return .exit(exitUrl)
        default:
            throw ModuleError.invalidConfig(configPath: "action", object: jsObj)
        }
    }
    
    /// Name of configuration object repodted in the exception.
    static let jsObj = "MalwarelyticsAppleDebuggerDetectionConfig"
}

extension AppProtectionRaspConfig.ScreenCaptureDetectionConfig {
    /// Create AppProtectionRaspConfig.ScreenCaptureDetectionConfig from JSON dictionary.
    /// - Parameter dict: Dictionary with configuration.
    /// - Returns: Configuration created from JSON dictionary.
    static func fromDictionary(_ dict: ConfigDictionary?) throws -> AppProtectionRaspConfig.ScreenCaptureDetectionConfig? {
        // JS is using limited, basic config for screen capture detection.
        guard let basicConfig = try AppProtectionRaspConfig.DetectionConfig.fromDictionary(dict) else {
            return nil
        }
        switch basicConfig {
        case .noAction:
            return .noAction
        case .notify:
            return .notify
        case .exit(let exitUrl):
            return .exit(exitUrl)
        @unknown default:
            throw ModuleError.invalidConfig(configPath: "action", object: jsObj)
        }
    }
    
    /// Name of configuration object repodted in the exception.
    static let jsObj = "MalwarelyticsAppleBasicDetectionConfig"
}

extension AppProtectionRaspConfig.RepackageConfig {
    /// Create AppProtectionRaspConfig.RepackageConfig from JSON dictionary.
    /// - Parameter dict: Dictionary with configuration.
    /// - Returns: Configuration created from JSON dictionary.
    static func fromDictionary(_ dict: ConfigDictionary?) throws -> AppProtectionRaspConfig.RepackageConfig? {
        guard let dict = dict else {
            return nil
        }
        let action = try dict.stringAt("action", in: jsObj)
        let exitUrl = try dict.stringOptAt("exitUrl", in: jsObj)
        let certs = try dict.stringArrayAt("trustedCertificates", in: jsObj)
        let trustedCerts = try certs.map {
            guard let tc = AppProtectionRaspConfig.RepackageConfig.TrustedCertificate(withBase64EncodedString: $0) else {
                throw ModuleError.invalidConfig(configPath: "trustedCertificates", object: jsObj)
            }
            return tc
        }
        
        switch action {
        case "NO_ACTION":
            return .noAction(trustedCerts)
        case "NOTIFY":
            return .notify(trustedCerts)
        case "EXIT":
            return .exit(trustedCerts, exitUrl)
        default:
            throw ModuleError.invalidConfig(configPath: "action", object: jsObj)
        }
    }
    
    /// Name of configuration object repodted in the exception.
    static let jsObj = "MalwarelyticsAppleRepackagingDetectionConfig"
}

extension AppProtectionEventConfig {
    /// Create AppProtectionEventConfig from JSON dictionary.
    /// - Parameter dict: Dictionary with configuration.
    /// - Returns: Configuration created from JSON dictionary.
    static func fromDictionary(_ dict: ConfigDictionary?) throws -> AppProtectionEventConfig {
        guard let dict = dict else { return .init() }
        return .init(
            enableEventCollection: try dict.boolAt("enableEventCollection", in: jsObj, fallback: true),
            enableScreenshotTakenCollection: try dict.boolAt("enableScreenshotTakenCollection", in: jsObj, fallback: true)
        )
    }
    
    /// Name of configuration object repodted in the exception.
    static let jsObj = "MalwarelyticsAppleEventsConfig"
}

extension AppProtectionEnvironment {
    /// Convert string into AppProtectionEnvironment enumeration.
    /// - Parameter value: String with environment specification.
    /// - Returns: Environment enumeration created from the string.
    static func fromValue(_ value: String?) throws -> AppProtectionEnvironment {
        guard let value = value else { return .production }
        switch value {
        case "PRODUCTION": return .production
        case "TEST": return .test
        default: throw ModuleError.invalidConfig(configPath: "environment")
        }
    }
}
