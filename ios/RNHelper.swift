//
// Copyright 2023 Wultra s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.
//

import React

typealias ConfigDictionary = Dictionary<String, Any>

extension Encodable {
    func toJsObject() throws -> Any {
        do {
            // Encode codable to JSON
            let body = try JSONEncoder().encode(self)
            // Decode back to ObjC representation
            return try JSONSerialization.jsonObject(with: body, options: [.fragmentsAllowed])
        } catch {
            throw ModuleError.genericError(message: "Serialization to JS object failed", exception: error as NSError)
        }
    }
}

extension ConfigDictionary {
    
    func hasObjectAt(_ path: String) -> Bool {
        return (try? objectAt(path: path) ?? nil) != nil
    }
    
    func objectAt(path: String, object: String? = nil, required: Bool = false) throws -> Any? {
        var dict = self
        var result: Any? = nil
        let components = path.split(separator: ".").map { String($0) }
        for (index, key) in components.enumerated() {
            let isLastKey = index == components.count - 1
            result = dict[key]
            if result != nil {
                // Object is not nil,
                if !isLastKey {
                    // If this is not last key, then try to move to the inner object.
                    if let innerDict = result as? Self {
                        dict = innerDict
                        result = nil
                    } else {
                        // Object acquired in the middle of path is not a dictionary
                        throw ModuleError.invalidConfig(configPath: path, object: object)
                    }
                }
            } else {
                // Object is nil
                break
            }
        }
        if result == nil && required {
            throw ModuleError.missingConfig(configPath: path, object: object)
        }
        return result
    }

    func boolAt(_ path: String, in object: String? = nil, required: Bool = false, fallback: Bool = false) throws -> Bool {
        guard let v = try objectAt(path: path, required: required) as? NSNumber else {
            if required {
                throw ModuleError.missingConfig(configPath: path, object: object)
            }
            return fallback
        }
        return v.boolValue
    }
    
    func stringOptAt(_ path: String, in object: String? = nil, fallack: String? = nil) throws -> String? {
        return try objectAt(path: path, object: object) as? String ?? fallack
    }
    
    func stringAt(_ path: String, in object: String? = nil) throws -> String {
        guard let v = try objectAt(path: path, object: object, required: true) as? String else {
            throw ModuleError.missingConfig(configPath: path, object: object)
        }
        return v
    }

    func dictAt(_ path: String, in object: String? = nil, required: Bool = false, fallback: ConfigDictionary = [:]) throws -> ConfigDictionary {
        guard let v = try objectAt(path: path, object: object, required: required) as? ConfigDictionary else {
            if required {
                throw ModuleError.missingConfig(configPath: path, object: object)
            }
            return fallback
        }
        return v
    }
    
    func stringArrayAt(_ path: String, in object: String? = nil, required: Bool = false, fallback: [String] = []) throws -> [String] {
        guard let v = try objectAt(path: path, object: object, required: required) as? Array<String> else {
            if required {
                throw ModuleError.missingConfig(configPath: path, object: object)
            }
            return fallback
        }
        return v
    }
    
    func dictOptAt(_ path: String, in object: String? = nil) throws -> ConfigDictionary? {
        return try? objectAt(path: path, object: object) as? ConfigDictionary
    }
}

func checkDictionary(value: Any?, name: String) throws -> Dictionary<String, Any> {
    if value == nil || value is NSNull {
        throw ModuleError.missingParam(paramName: name)
    }
    guard let value = RCTConvert.nsDictionary(value) as? Dictionary<String, Any> else {
        throw ModuleError.invalidParam(paramName: name)
    }
    return value
}

func checkString(value: Any?, name: String) throws -> String {
    if value == nil || value is NSNull {
        throw ModuleError.missingParam(paramName: name)
    }
    guard let value = RCTConvert.nsString(value) else {
        throw ModuleError.invalidParam(paramName: name)
    }
    return value
}

func checkOptString(value: Any?, name: String, fallback: String? = nil) throws -> String? {
    if value == nil || value is NSNull {
        return fallback
    }
    guard let value = RCTConvert.nsString(value) else {
        throw ModuleError.invalidParam(paramName: name)
    }
    return value
}
