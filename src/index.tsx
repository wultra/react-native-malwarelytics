import { NativeModules } from 'react-native';

interface MalwarelyticsConfig {
  /**
   * Malwarelytics in silent mode does not show any UI. Default is true.
   */
  enableSilentMode?: boolean;
  
  /**
   * How often will be antivirus database checked (hourly). Default is 48 hours.
   */
  onlineCheckIntervalHours?: number;

  /**
   * Custom identifier of the user. You can set it later via setClientId method.
   */
  clientId?: string;

}

const { Malwarelytics } = NativeModules;

class MalwarelyticsPlugin {

  /**
   * If the malwarelytics are initialized.
   * 
   * @returns promise with boolean if initialized or not
   */
  isInitialized(): Promise<boolean> {
    return Malwarelytics.isInitialized();
  }

  /**
   * Initializes the malwarelytics with provided configuration.
   * Note that username and password needs to be set inside via gradle configuration.
   *
   * @param config Configuration file
   * @returns Promise that raises an error if initialization fails
   */
  initialize(config: MalwarelyticsConfig): Promise<void> {
    const cfg: MalwarelyticsConfig = {
      enableSilentMode: true,
      onlineCheckIntervalHours: 48,
      ...config
    };
    return Malwarelytics.initialize(cfg.enableSilentMode, cfg.onlineCheckIntervalHours, cfg.clientId);
  }

  /**
   * Sets a new clinet id that will be sent to the backend for user identification.
   * Pass null to remove the current client id (for example when user logged-out).
   *
   * @param clientId Client id. Null for deleting the value
   * @returns Promise that raises an error if initialization fails
   */
  setClientId(clientId: string | null): Promise<void> {
    return Malwarelytics.setClientId(clientId);
  }

  /**
   * Schedules a job that will execute smart protection run. Note that this is asynchronous and
   * can take some time.
   *
   * @returns Promise that raises an error if something went wrong
   */
  triggerSmartProtection(): Promise<void> {
    return Malwarelytics.triggerSmartProtection();
  }
}

export default new MalwarelyticsPlugin();
