//
// Copyright 2023 Wultra s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.
//

package com.wultra.android.malwarelytics.reactnative

/**
 * Error codes reported from MalwarelyticsModule
 */
enum class ErrorCode {
    WRONG_STATE,
    INVALID_CONFIG,
    MISSING_CONFIG,
    INVALID_PARAM,
    MISSING_PARAM,
    GENERIC_ERROR
}

/**
 * Intermediate object used to convert exception to promise rejection.
 */
data class ErrorInfo(
    val code: ErrorCode,
    val message: String,
    val cause: Throwable? = null
)

/**
 * Exception reported in case that function is called in wrong module's state.
 */
class WrongStateException(
    val current: MalwarelyticsModule.State,
    val expected: MalwarelyticsModule.State
): Exception(), RnConvertibleError {
    override fun toErrorInfo(): ErrorInfo {
        return ErrorInfo(
            ErrorCode.WRONG_STATE,
            "Function can be called only in ${expected.name} state. The current state is ${current.name}"
        )
    }
}

/**
 * Exception reported when required parameter in function is missing.
 */
class MissingParameterException(
    val paramName: String,
    cause: Throwable? = null
) : Exception(cause), RnConvertibleError {
    override fun toErrorInfo(): ErrorInfo {
        return ErrorInfo(
            ErrorCode.MISSING_PARAM,
            "Required parameter \"${paramName}\" is missing",
            cause
        )
    }
}

/**
 * Exception reported when parameter provided to the function is invalid.
 */
class InvalidParameterException(
    val paramName: String,
    cause: Throwable? = null
) : Exception(cause), RnConvertibleError {
    override fun toErrorInfo(): ErrorInfo {
        return ErrorInfo(
            ErrorCode.INVALID_PARAM,
            "Parameter '${paramName}' is invalid or has wrong type",
            cause
        )
    }
}

/**
 * Exception reported when some part of the configuration contains invalid data.
 */
class InvalidConfigException(
    val configPath: String,
    val obj: String? = null,
    cause: Throwable? = null
) : Exception(cause), RnConvertibleError {
    override fun toErrorInfo(): ErrorInfo {
        return ErrorInfo(
            ErrorCode.INVALID_CONFIG,
            if (obj != null) {
                "Invalid parameter \"${configPath}\" in configuration object \"${obj}\""
            } else {
                "Invalid configuration object at path \"${configPath}\""
            },
            cause
        )
    }
}

/**
 * Exception reported when some part of the configuration is required and is missing.
 */
class MissingConfigException(
    val configPath: String,
    val obj: String? = null,
    cause: Throwable? = null
) : Exception(cause), RnConvertibleError {
    override fun toErrorInfo(): ErrorInfo {
        return ErrorInfo(
            ErrorCode.MISSING_CONFIG,
            if (obj != null) {
                "Missing required parameter \"${configPath}\" in configuration object \"${obj}\""
            } else {
                "Missing required parameter in configuration object at path \"${configPath}\""
            },
            cause
        )
    }
}

/**
 * Exception reported when internal or unexpected error occurred during the execution.
 */
class InternalError(
    message: String,
    cause: Throwable? = null
): Exception(message, cause), RnConvertibleError {
    override fun toErrorInfo(): ErrorInfo {
        return ErrorInfo(
            ErrorCode.GENERIC_ERROR,
            message ?: "Internal error",
            cause
        )
    }
}
