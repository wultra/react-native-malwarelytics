//
// Copyright 2023 Wultra s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.
//

package com.wultra.android.malwarelytics.reactnative

import com.facebook.react.bridge.Arguments
import com.facebook.react.bridge.ReadableMap
import com.wultra.android.antimalware.ApkThreat
import com.wultra.android.antimalware.smart.SmartProtectionResult
import com.wultra.android.rasp.*

fun RootDetection.toJs(): ReadableMap {
    // SystemIntegrityInfo
    return Arguments.createMap()
        .put("isJailbroken", false)
        .put("isRooted", isRooted)
        // RootDetectionInfo
        .put("rootInfo", Arguments.createMap()
            .put("isRootCloaked", isRootCloaked)
            .put("rootDetectionProofs", rootDetectionProofs.map { it.toString() })
            .put("rootDetectionConfidence", rootDetectionConfidence)
            .put("rootCloakDetectionConfidence", rootCloakDetectionConfidence)
        )
}

fun HttpProxyDetection.toJs(): ReadableMap {
    // HttpProxyInfo
    return Arguments.createMap()
        .put("isHttpProxyEnabled", isHttpProxyEnabled)
        .put("isUsingAutoConfig", isUsingAutoConfig())
        .put("host", host)
        .put("port", port)
        .put("exclusionList", exclusionList)
        .put("pacFileUrl", pacFileUrl?.toString())
}

fun ScreenSharingDetection.toJs(): ReadableMap {
    // ScreenSharingInfo
    return Arguments.createMap()
        .put("isScreenShared", isScreenShared)
        .put("numberOfDisplays", numberOfDisplays)
}

fun TapjackingDetection.toJs(): ReadableMap {
    // TapjackingInfo
    return Arguments.createMap()
        .put("isTapjackingBlocked", isTapjackingBlocked)
        .put("tapjackingCapableApps", tapjackingCapableApps)
}

fun EmulatorDetection.toJs(): ReadableMap {
    return Arguments.createMap()
        .put("isEmulator", isEmulator)
        .put("detectedEmulatorType", detectedEmulatorType?.toString())
        .put("emulatorDetectionProofs", emulatorDetectionProofs.map { it.toString() })
}

fun SmartProtectionResult.toJs(): ReadableMap {
    return Arguments.createMap()
        .put("uiDisplayed", uiDisplayed)
        .put("onlineUpdateSucceeded", onlineUpdateSucceeded)
        .put("evaluationSucceeded", evaluationSucceeded)
}

fun ApkThreat.toJs(): ReadableMap {
    return Arguments.createMap()
        .put("packageName", packageName)
        .put("threatIndex", threatIndex.name)
        .put("evaluatedThreatIndex", evaluatedThreatIndex.name)
        .put("suggestedThreatIndex", suggestedThreatIndex.name)
        .put("malwareDetectionName", malwareDetectionName)
        .put("mitigations", mitigations.toJs { it.name })
        .put("reasons", reasons.toJs { it.name })
        .put("threatInstaller", threatInstaller?.name)
}
