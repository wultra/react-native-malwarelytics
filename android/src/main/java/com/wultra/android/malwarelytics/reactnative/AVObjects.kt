//
// Copyright 2023 Wultra s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.
//

package com.wultra.android.malwarelytics.reactnative

import com.facebook.react.bridge.Arguments
import com.facebook.react.bridge.ReadableMap
import com.wultra.android.rasp.*

fun RootDetection.toJs(): ReadableMap {
    // SystemIntegrityInfo
    val result = Arguments.createMap()
    result.put("isJailbroken", false)
    result.put("isRooted", isRooted)
    // RootDetectionInfo
    val info = Arguments.createMap()
    info.put("isRootCloaked", isRootCloaked)
    info.put("rootDetectionProofs", rootDetectionProofs.map { it.toString() })
    info.put("rootDetectionConfidence", rootDetectionConfidence)
    info.put("rootCloakDetectionConfidence", rootCloakDetectionConfidence)
    result.put("rootInfo", info)
    return result
}

fun HttpProxyDetection.toJs(): ReadableMap {
    // HttpProxyInfo
    val result = Arguments.createMap()
    result.put("isHttpProxyEnabled", isHttpProxyEnabled)
    result.put("isUsingAutoConfig", isUsingAutoConfig())
    result.put("host", host)
    result.put("port", port)
    result.put("exclusionList", exclusionList)
    result.put("pacFileUrl", pacFileUrl?.toString())
    return result
}

fun ScreenSharingDetection.toJs(): ReadableMap {
    // ScreenSharingInfo
    val result = Arguments.createMap()
    result.put("isScreenShared", isScreenShared)
    result.put("numberOfDisplays", numberOfDisplays)
    return result
}

fun TapjackingDetection.toJs(): ReadableMap {
    // TapjackingInfo
    val result = Arguments.createMap()
    result.put("isTapjackingBlocked", isTapjackingBlocked)
    result.put("tapjackingCapableApps", tapjackingCapableApps)
    return result
}

fun EmulatorDetection.toJs(): ReadableMap {
    val result = Arguments.createMap()
    result.put("isEmulator", isEmulator)
    result.put("detectedEmulatorType", detectedEmulatorType?.toString())
    result.put("emulatorDetectionProofs", emulatorDetectionProofs.map { it.toString() })
    return result
}
