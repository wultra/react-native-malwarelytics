//
// Copyright 2023 Wultra s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.
//

package com.wultra.android.malwarelytics.reactnative

import com.facebook.react.bridge.ReactContext
import com.facebook.react.modules.core.DeviceEventManagerModule
import com.facebook.react.util.RNLog

/**
 * The EventHelper class implements sending events back to the JavaScript.
 */
class EventHelper(
    /**
     * List of supported events.
     */
    val supportedEvents: Iterable<String>,
    /**
     * React native context.
     */
    private val reactContext: ReactContext) {

    /**
     * Test whether the event is supported.
     */
    fun isEventSupported(eventName: String) = supportedEvents.contains(eventName)

    /**
     * Check whether the event is supported. If it's unsupported, then print warning
     * to the console and return false.
     */
    private fun checkEventSupported(eventName: String) =
        if (!isEventSupported(eventName)) {
            RNLog.w(reactContext, "Event ${eventName} is not supported")
            false
        } else {
            true
        }

    /**
     * Number of currently registered listeners.
     */
    private var listenerCount = 0

    /**
     * Add listener for given event name. If event is not supported, then does nothing.
     */
    fun addListener(eventName: String) {
        if (!checkEventSupported(eventName)) {
            return
        }
        listenerCount += 1
    }

    /**
     * Remove requested number of listeners.
     */
    fun removeListeners(count: Int) {
        listenerCount -= count
        if (listenerCount < 0) {
            RNLog.w(reactContext, "Removing too many listeners")
            listenerCount = 0
        }
    }

    /**
     * Send event to the listeners.
     * @param eventName Name of the event.
     * @param body Content of the event.
     */
    fun sendEvent(eventName: String, body: Any) {
        if (!checkEventSupported(eventName)) {
            return
        }
        try {
            reactContext
                .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
                .emit(eventName, body)
        } catch (t: Throwable) {
            RNLog.w(reactContext, "Sending event failed with exception: $t")
        }
    }
}
