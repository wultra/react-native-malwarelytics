package com.wultra.android.reactnative.malwarelytics

import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.bridge.ReactContextBaseJavaModule
import com.facebook.react.bridge.ReactMethod
import com.facebook.react.bridge.Promise
import com.wultra.android.antimalware.Antivirus
import com.wultra.android.antimalware.AntivirusConfig
import com.wultra.android.antimalware.SmartProtectionResult
import kotlin.concurrent.thread

interface IMalwarelyticsConfig {
  val userName: String
  val password: String
  val theme: Int?
  val notificationIcon: Int?
}

class MalwarelyticsModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaModule(reactContext) {

  enum class Error {
    PLUGIN_ALREADY_INITIALIZED,
    PLUGIN_NOT_INITIALIZED,

    INITIALIZE_MISSING_CREDENTIALS,

    TRIGGER_SMART_PROTECTION_UPDATE_FAILED,
    TRIGGER_SMART_PROTECTION_FAILED
  }

  private val config: IMalwarelyticsConfig = try {
    Class.forName("${javaClass.`package`?.name}.MalwarelyticsConfig").newInstance() as IMalwarelyticsConfig
  } catch (t: Throwable) {
    object: IMalwarelyticsConfig {
      override val userName: String
        get() = ""
      override val password: String
        get() = ""
      override val theme: Int?
        get() = null
      override val notificationIcon: Int?
        get() = null
    }
  }
  private var antivirus: Antivirus? = null

  override fun getName(): String {
    return "Malwarelytics"
  }

  private fun isAvInitialized() = this.antivirus?.isInitialized() ?: false

  @ReactMethod
  fun isInitialized(promise: Promise) {
    promise.resolve(isAvInitialized())
  }

  @ReactMethod
  fun initialize(enableSilentMode: Boolean, onlineCheckIntervalHours: Int, clientId: String?, promise: Promise) {
    if (this.isAvInitialized()) {
      promise.reject(Error.PLUGIN_ALREADY_INITIALIZED.name, "Plugin already initialized")
      return
    }

    val username = config.userName
    val password = config.password
    val theme = config.theme
    val notificationIcon = config.notificationIcon

    if (password == "" || username == "") {
      promise.reject(Error.INITIALIZE_MISSING_CREDENTIALS.name, "No credentials provided.")
      return
    }

    val builder = AntivirusConfig.Builder(reactApplicationContext)
      .smartProtectionConfig(
        AntivirusConfig.SmartProtectionConfig.Builder()
          .smartProtectionEnabled(true)
          .silentModeEnabled(enableSilentMode)
          .smartProtectionIntervalHours(onlineCheckIntervalHours)
          .build()
      )
      .apiUsername(username)
      .apiPassword(password)

    val tmBuilder = AntivirusConfig.ThreatMitigationUIConfig.Builder()
    theme?.let { tmBuilder.screenTheme(it) }
    notificationIcon?.let { tmBuilder.notificationSmallIcon(it) }
    builder.threatMitigationUIConfig(tmBuilder.build())

    clientId?.let { builder.clientAppUserId(clientId) }

    val antivirus = Antivirus.getInstance()
    antivirus.initializeAsync(builder.build(), object : Antivirus.InitializationObserver {
      override fun onInitialized() {
        promise.resolve(null)
      }
    })
    this.antivirus = antivirus
  }

  @ReactMethod
  fun setClientId(clientId: String?, promise: Promise) {

    if (!this.isAvInitialized()) {
      promise.reject(Error.PLUGIN_NOT_INITIALIZED.name, "Plugin is not initialized")
      return
    }

    this.antivirus!!.getUpdateManager().updateClientAppUserId(clientId)
    promise.resolve(null)
  }

  @ReactMethod
  fun triggerSmartProtection(promise: Promise) {
    thread {
      if (!this.isAvInitialized()) {
        promise.reject(Error.PLUGIN_NOT_INITIALIZED.name, "Plugin is not initialized")
      } else {
        when (this.antivirus!!.performSingleSmartProtectionUpdate()) {
          SmartProtectionResult.COMPLETE_SUCCESS -> promise.resolve(null)
          SmartProtectionResult.UPDATE_FAILED -> promise.reject(Error.TRIGGER_SMART_PROTECTION_UPDATE_FAILED.name, "Update failed")
          SmartProtectionResult.COMPLETE_FAILURE -> promise.reject(Error.TRIGGER_SMART_PROTECTION_FAILED.name, "Smart protection failed")
        }
      }
    }
  }
}
