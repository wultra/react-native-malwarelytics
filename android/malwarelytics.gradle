/**
 * Configure Malwarelytics UI.
 * @param flavor Build flavor
 * @param theme Resource ID, for custom theme, for example {@code "R.style.CustomAppTheme"}
 * @param notificationSmallIcon Resource ID for notification icon
 * @param notificationChannelId Channel ID for notification
 * @param deleteIcon Resource ID for delete icon
 * @param settingsIcon Resource ID for settings icon.
 */
project.ext.configureMalwarelyticsUI = { flavor, String theme = null, String notificationSmallIcon = null, String notificationChannelId = null, String deleteIcon = null, String settingsIcon = null ->
    // Destination where malwarelytics configuration file will be created
    def file = new File("${buildDir}/generated/malwarelytics/MalwarelyticsUiConfig.java")
    new File(file.getParent()).mkdirs() // make necessary folders

    def applicationId = [flavor.applicationId, flavor.applicationIdSuffix].findAll().join()

    if (theme == null) {
        theme = "null"
    }
    if (notificationSmallIcon == null) {
        notificationSmallIcon = "null"
    }
    if (notificationChannelId == null) {
        notificationSmallIcon = "null"
    }
    if (deleteIcon == null) {
        deleteIcon = "null"
    }
    if (settingsIcon == null) {
        settingsIcon = "null"
    }

    // Generate configuration file.
    // note that package name of the configuration file matches the package of the library
    file.text = """/*
 * Automatically generated file. DO NOT MODIFY IT.
 */

package com.wultra.android.malwarelytics.reactnative;

import ${applicationId}.R;

public final class MalwarelyticsUiConfig implements IMalwarelyticsUiConfig {
  public MalwarelyticsUiConfig() {}
  public Integer getTheme() { return ${theme}; }
  public Integer getNotificationSmallIcon() { return ${notificationSmallIcon}; }
  public String getNotificationChannelId() { return ${notificationChannelId}; }
  public Integer getScreenDeleteIcon() { return ${deleteIcon}; }
  public Integer getScreenSettingsIcon() { return ${settingsIcon}; }
}"""
    flavor.sourceSets.findByName(flavor.getName()).java.srcDirs += [file.getParent()]
}

