def getArtifactoryCredentials(name) {
  def propName = 'wultraArtifactory_' + name
  // At first, try root project's ext dictionary
  if (rootProject.ext.has(propName)) {
    logger.println('Malwarelytics property ' + propName + ' resolved from ext')
    return rootProject.ext.get(propName)
  }
  def propFiles = [
    project.rootProject.file('local.properties'),
    project.file('local.properties')
  ]
  for (file in propFiles) {
    if (file.canRead()) {
      def props = new Properties()
      props.load(file.newDataInputStream())
      def value = props[propName]
      if (value != null) {
        logger.println('Malwarelytics property ' + propName + ' resolved from ' + file.name)
        return value
      }
    }
  }
  logger.error('Failed to resolve required property: ' + propName)
  return null
}

project.ext {
  artifactoryUrl = 'https://wultra.jfrog.io/artifactory/malwarelytics-android/'
  artifactoryUser = getArtifactoryCredentials('username')
  artifactoryPass = getArtifactoryCredentials('password')
}

buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["Malwarelytics_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.2"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["Malwarelytics_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["Malwarelytics_" + name]).toInteger()
}

android {
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

}

repositories {
  mavenCentral()
  google()
  maven {
    name "WultraMalwarelyticsArtifactory"
    url project.ext.get('artifactoryUrl')
    credentials {
      username project.ext.get('artifactoryUser')
      password project.ext.get('artifactoryPass')
    }
  }
}

def kotlin_version = getExtOrDefault("kotlinVersion")
def antivirus_version = getExtOrDefault("antivirusVersion")

dependencies {
  if (project == rootProject) {
    // The standalone build require to specify exact version of RN
    def rnVersion = getExtOrDefault("reactNativeVersion")
    implementation "com.facebook.react:react-android:${rnVersion}"
  } else {
    // This works for RN versions > 0.71
    implementation "com.facebook.react:react-android"
  }
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "com.wultra.android.antimalware:antivirus:$antivirus_version"
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "Malwarelytics"
    codegenJavaPackageName = "com.wultra.android.malwarelytics.reactnative"
  }
}
